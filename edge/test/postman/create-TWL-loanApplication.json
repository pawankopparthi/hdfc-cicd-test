{
	"info": {
		"_postman_id": "c3c04389-4e16-4189-acca-ead5bb585d8e",
		"name": "create-TWL-loanApplication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17518650"
	},
	"item": [
		{
			"name": "create-TWL-loanApplication",
			"item": [
				{
					"name": "Success",
					"item": [
						{
							"name": "Success_create-TWL-loanApplication_Enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//ENCRYPTION UTILITY - Start\r",
											"var data = pm.response.json();\r",
											"\r",
											"var navigator = {};\r",
											"var window = {};\r",
											"eval(pm.globals.get(\"jsrsasign\"));\r",
											"\r",
											"//Generate JWT-start\r",
											"var header = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};\r",
											"var sHeader = JSON.stringify(header);\r",
											"var sPayload = JSON.stringify(data);\r",
											"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, pm.globals.get(\"PARTNERPVTKEY\"));\r",
											"pm.environment.set('signedToken', sJWT);\r",
											"//Generate JWT-End\r",
											"\r",
											"//AES Encrypt-Generate Encrypted payload-start\r",
											"var payload = \"qwertyuiqwertyui\"+sJWT; //\r",
											"var key = \"asdfghjkasdfghjkasdfghjkasdfghjk\" //Random 32 byte key for every new request-required.\r",
											"var keyutf = CryptoJS.enc.Utf8.parse(key)\r",
											"var iv = CryptoJS.enc.Base64.parse(\"\")\r",
											"var encryptedText = CryptoJS.AES.encrypt(payload, keyutf, {iv}).toString();\r",
											"pm.environment.set(\"RSEV\", encryptedText)\r",
											"//AES Encrypt-Generate Encrypted payload-end\r",
											"\r",
											"//RSA Encrypt- 32 byte key encrypted-start\r",
											"var bankpubkeyObj = KEYUTIL.getKey(pm.globals.get(\"BANKPUBKEY\"));\r",
											"var encryptedkey = hextob64(KJUR.crypto.Cipher.encrypt(key, bankpubkeyObj,\"RSA\"))\r",
											"pm.environment.set(\"SEV\", encryptedkey)\r",
											"//RSA Encrypt- 32 byte key encrypted-end\r",
											"//ENCRYPTION UTILITY - End\r",
											"\r",
											"postman.setNextRequest(\"Success_create-TWL-loanApplication\");\r",
											"\r",
											"pm.test(\"SUCCESS\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"oMetadata\": {\r\n        \"sVersion\": \"UNASSISTED 1.0.0\",\r\n        \"sTimeStamp\": \"16-09-2022 23:59:59\",\r\n        \"sRequestId\": \"rtgertg4545t45\",\r\n        \"sInstId\": \"4010\",\r\n        \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n        \"sSrcType\": \"ONLINE UNASSISTED\",\r\n        \"sSrcName\": \"Honda Motors\",\r\n        \"sSrcCode\": \"24647\",\r\n        \"sJourneyID\": \"1234567890\"\r\n    },\r\n    \"oPayload\": {\r\n        \"oBorrower\": {\r\n            \"oWorkDetails\": [\r\n                {\r\n                    \"sOfficeEmailId\": \"\",\r\n                    \"sOfficeTelephoneNumber\": \"\",\r\n                    \"sSTDCode\": \"\",\r\n                    \"sOfficeExtension\": \"\",\r\n                    \"sEmplType\": \"Salaried\",\r\n                    \"sEmplName\": \"Hitesh\",\r\n                    \"sNetMonthlyIncome\": \"100000\",\r\n                    \"sAnnualIncome\": \"\",\r\n                    \"sTmWithEmplr\": \"2\",\r\n                    \"sDesig\": \"Engineer\",\r\n                    \"sWorkExps\": \"2\"\r\n                }\r\n            ],\r\n            \"aProductDetail\": [\r\n                {\r\n                    \"dOnRoadPrice\": \"66731\",\r\n                    \"dRequiredLoanAmount\": 66731,\r\n                    \"sSalesPromoCode\": \"LNLSNIL1\",\r\n                    \"sScheme\": \"1\",\r\n                    \"sManufacturer\": \"BAJAJ AUTO LTD.\",\r\n                    \"sModelNo\": \"BAJAJ CT 110\",\r\n                    \"sAssetModelMake\": \"CT 110\",\r\n                    \"iTenure\": \"24\"\r\n                }\r\n            ],\r\n            \"oCurrentAddress\": {\r\n                \"sOwnership\": \"OWNED BY SELF/SPOUSE\",\r\n                \"sLine1\": \"sdfsdfsdfsd\",\r\n                \"sLine2\": 7867868.0,\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"PUNE\",\r\n                \"sState\": \"MAHARASHTRA\",\r\n                \"sLandMark\": 89789,\r\n                \"iPinCode\": \"411022\",\r\n                \"sYearAtCity\": \"1\",\r\n                \"sNoOfYearsAtResidence\": \"1\"\r\n            },\r\n            \"oPermanentAddress\": {\r\n                \"sLine1\": \"fgsdfsd\",\r\n                \"sLine2\": \"dsfgsdfg\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"PUNE\",\r\n                \"sState\": \"MAHARASHTRA\",\r\n                \"sLandMark\": \"sdfgsdfgsd\",\r\n                \"iPinCode\": \"411022\",\r\n                \"sYearAtCity\": \"1\",\r\n                \"sNoOfYearsAtResidence\": \"1\"\r\n            },\r\n            \"oCompanyAddress\": {\r\n                \"sLine1\": \"fgsdfsd\",\r\n                \"sLine2\": \"sdfsadas\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"PUNE\",\r\n                \"sState\": \"MAHARASHTRA\",\r\n                \"sLandMark\": \"dsfasfasd\",\r\n                \"iPinCode\": \"411022\",\r\n                \"sArea\": \"\"\r\n            },\r\n            \"oPersonalDetails\": {\r\n                \"sFirstName\": \"Afdgdhghg\",\r\n                \"sMiddleName\": \"AJKJKH\",\r\n                \"sLastName\": \"IJKLJ\",\r\n                \"sDateOfBirth\": \"27071985\",\r\n                \"sEmailId\": \"hiteshk@lentra.ai\",\r\n                \"sEducationQualification\": \"Graduate\",\r\n                \"sMaritalStatus\": \"Single\",\r\n                \"sGender\": \"Male\",\r\n                \"sPANDetails\": \"AGCPN1261A\",\r\n                \"sDrivingLicenseNumber\": \"AH867786876\",\r\n                \"sDrivingLicenseExpiry\": \"22062023\",\r\n                \"sPassportNumber\": \"A7564567\",\r\n                \"sPassportExpiry\": \"22052023\",\r\n                \"sVoterId\": \"SDSSD6677W778854\",\r\n                \"sAadhaarNumber\": \"\",\r\n                \"sAlternateMobileNumber\": \"7777777777\",\r\n                \"sMobileNumber\": \"9988888740\"\r\n            },\r\n            \"oPlatformDetails\": {\r\n                \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n                \"sSrcType\": \"Online Unassisted\",\r\n                \"sUniqueReferenceNumber\": \"12345678901\",\r\n                \"sCustomerIPAddress\": \"8.8.8.88\",\r\n                \"sOTPConsentDatetime\": \"16-09-2022 23:59:59\",\r\n                \"sPartnerName\": \"Honda\",\r\n                \"sVendorCode\": \"123456\",\r\n                \"sBrokerId\": \"789\",\r\n                \"sLTSNumber\": \"123YG6\",\r\n                \"sBranchCode\": \"8787HHH\"\r\n            }\r\n        }\r\n    },\r\n    \"oExtensibleData\": {\r\n        \"sampleData\": \"sampleValue\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/enc_dec_util_high",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"enc_dec_util_high"
									]
								}
							},
							"response": []
						},
						{
							"name": "Success_create-TWL-loanApplication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code == 200) \r",
											"tests[\"response http status code is 200\"] = true;\r",
											"else\r",
											"tests[\"response http status code is 200\"]= false;\r",
											"\r",
											"tests[\"Status code name Should be OK\"] = responseCode.name.has(\"OK\");\r",
											" \r",
											"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
											"tests[\"Response content-type is application/json\"] = true;\r",
											"else\r",
											"tests[\"Response content-type is application/json\"] = false;\r",
											"\r",
											"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\")  && responseBody.has(\"Status\"))\r",
											"tests[\"Response body contains all necessary fileds\"] = true;\r",
											"else\r",
											"tests[\"Response body contains all necessary fileds\"] = false;\r",
											"\r",
											"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
											"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
											"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
											"\r",
											"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
											"tests[\"response headers contains unnecessary headers\"]= false;\r",
											"//DECRYPTION UTILITY - Start\r",
											"const responseJson = pm.response.json()\r",
											"var data1 = responseJson.ResponseSignatureEncryptedValue;\r",
											"var data2 = responseJson.GWSymmetricKeyEncryptedValue;\r",
											"var MSG=responseJson.Status\r",
											"\r",
											"var navigator = {};\r",
											"var window = {};\r",
											"eval(pm.globals.get(\"jsrsasign\"));\r",
											"\r",
											"//RSA Decrypt- 32 byte key decrypted-start\r",
											"var partnerpvtkeyObj = KEYUTIL.getKey(pm.globals.get(\"PARTNERPVTKEY\"));\r",
											"var hdata2 = b64tohex(data2)\r",
											"var dKey = KJUR.crypto.Cipher.decrypt(hdata2, partnerpvtkeyObj,\"RSA\")\r",
											"pm.environment.set(\"32ByteKey\", dKey)\r",
											"//RSA Decrypt- 32 byte key decrypted-end\r",
											"\r",
											"//AES Decrypt-Generate decrypted payload-start\r",
											"var keyutf = CryptoJS.enc.Utf8.parse(pm.environment.get(\"32ByteKey\"))\r",
											"var iv = CryptoJS.enc.Base64.parse(\"\")\r",
											"var sJWT = hextorstr(CryptoJS.AES.decrypt(data1, keyutf, {iv}).toString().substring(32))\r",
											"pm.environment.set(\"signedTokenRes\", sJWT )\r",
											"//AES Decrypt-Generate decrypted payload-end\r",
											"\r",
											"//Verify JWT-start\r",
											"var verifyJWT = KJUR.jws.JWS.verify(sJWT, pm.globals.get(\"BANKPUBKEY\"),['RS256'])\r",
											"var response = KJUR.jws.JWS.parse(sJWT).payloadPP\r",
											"pm.environment.set(\"Response\", response);\r",
											"//Verify JWT-End\r",
											"//DECRYPTION UTILITY - End\r",
											"\r",
											"if (responseJson.Status==\"SUCCESS\")\r",
											"postman.setNextRequest(\"Unsign_Decrypt\");\r",
											"else\r",
											"postman.setNextRequest(null);\r",
											"\r",
											"pm.test(MSG, function () { \r",
											"        pm.expect(responseJson.Status).is.to.equal(\"SUCCESS\"); \r",
											"    });"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"API",
										"create-TWL-loanApplication"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unsign_Decrypt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{Response}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/enc_dec_util_high",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"enc_dec_util_high"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SQL Injection",
					"item": [
						{
							"name": "Success_create-TWL-loanApplication_Enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//ENCRYPTION UTILITY - Start\r",
											"var data = pm.response.json();\r",
											"\r",
											"var navigator = {};\r",
											"var window = {};\r",
											"eval(pm.globals.get(\"jsrsasign\"));\r",
											"\r",
											"//Generate JWT-start\r",
											"var header = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};\r",
											"var sHeader = JSON.stringify(header);\r",
											"var sPayload = JSON.stringify(data);\r",
											"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, pm.globals.get(\"PARTNERPVTKEY\"));\r",
											"pm.environment.set('signedToken', sJWT);\r",
											"//Generate JWT-End\r",
											"\r",
											"//AES Encrypt-Generate Encrypted payload-start\r",
											"var payload = \"qwertyuiqwertyui\"+sJWT; //\r",
											"var key = \"asdfghjkasdfghjkasdfghjkasdfghjk\" //Random 32 byte key for every new request-required.\r",
											"var keyutf = CryptoJS.enc.Utf8.parse(key)\r",
											"var iv = CryptoJS.enc.Base64.parse(\"\")\r",
											"var encryptedText = CryptoJS.AES.encrypt(payload, keyutf, {iv}).toString();\r",
											"pm.environment.set(\"RSEV\", encryptedText)\r",
											"//AES Encrypt-Generate Encrypted payload-end\r",
											"\r",
											"//RSA Encrypt- 32 byte key encrypted-start\r",
											"var bankpubkeyObj = KEYUTIL.getKey(pm.globals.get(\"BANKPUBKEY\"));\r",
											"var encryptedkey = hextob64(KJUR.crypto.Cipher.encrypt(key, bankpubkeyObj,\"RSA\"))\r",
											"pm.environment.set(\"SEV\", encryptedkey)\r",
											"//RSA Encrypt- 32 byte key encrypted-end\r",
											"//ENCRYPTION UTILITY - End\r",
											"\r",
											"postman.setNextRequest(\"SQLInjectionDetected\");\r",
											"\r",
											"pm.test(\"SUCCESS\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"oMetadata\": {\r\n        \"sVersion\": \"Select * UNASSISTED 1.0.0\",\r\n        \"dtTimeStamp\": \"2022-09-18\",\r\n        \"sRequestId\": \"rtgertg4545t45\",\r\n        \"sInstId\": \"4010\",\r\n        \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n        \"sSrcType\": \"ONLINE UNASSISTED\",\r\n        \"sSrcName\": \"Honda Motors\",\r\n        \"sSrcCode\": \"24647\",\r\n        \"sJourneyID\": \"1234567892\"\r\n    },\r\n    \"oPayload\": {\r\n        \"oBorrower\": {\r\n            \"oWorkDetails\": [\r\n                {\r\n                    \"sOfficeEmailId\": \"\",\r\n                    \"sOfficeTelephoneNumber\": \"123456\",\r\n                    \"sSTDCode\": \"0222\",\r\n                    \"sOfficeExtension\": \"\",\r\n                    \"sEmplType\": \"Salaried\",\r\n                    \"sEmplName\": \"I3 CONSULTING PRIVATE LIMITED.\",\r\n                    \"dNetMonthlyIncome\": \"50000\",\r\n                    \"dAnnualIncome\": \"\",\r\n                    \"iTmWithEmplr\": \"3\",\r\n                    \"sDesig\": \"Manager\",\r\n                    \"sWorkExps\": \"5\"\r\n                }\r\n            ],\r\n            \"aProductDetail\": [\r\n                {\r\n                    \"dOnRoadPrice\": 90000,\r\n                    \"dRequiredLoanAmount\": 50000,\r\n                    \"sSalesPromoCode\": \"\",\r\n                    \"sScheme\": \"\",\r\n                    \"sManufacturer\": \"HONDA MOTORCYCLE AND SCOOTER IN P LTD\",\r\n                    \"sModelNo\": \"HONDA ACTIVA 6G DLX BS VI\",\r\n                    \"sAssetModelMake\": \"ACTIVA\",\r\n                    \"iTenure\": \"18\"\r\n                }\r\n            ],\r\n            \"oCurrentAddress\": {\r\n                \"sOwnership\": \"OWNED BY SELF/SPOUSE\",\r\n                \"sLine1\": \"abcdef\",\r\n                \"sLine2\": \"abcdef\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"Mumbai\",\r\n                \"sState\": \"Maharashtra\",\r\n                \"sLandMark\": \"jfbvjh\",\r\n                \"iPinCode\": \"400011\",\r\n                \"iYearAtCity\": \"5\",\r\n                \"inoOfYearsAtResidence\": \"3\"\r\n            },\r\n            \"oCompanyAddress\": {\r\n                \"sLine1\": \"abcdefg\",\r\n                \"sLine2\": \"abcdefg\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"Mumbai\",\r\n                \"sState\": \"MAHARASHTRA\",\r\n                \"sLandMark\": \"hgdvfhsg\",\r\n                \"iPinCode\": \"400011\",\r\n                \"sArea\": \"\"\r\n            },\r\n            \"oPersonalDetails\": {\r\n                \"sFirstName\": \"sayali\",\r\n                \"sMiddleName\": \"\",\r\n                \"sLastName\": \"khismatrao\",\r\n                \"sDateOfBirth\": \"06041995\",\r\n                \"sEmailId\": \"sayali.khismatrao@hdfcbank.com\",\r\n                \"sEducationQualification\": \"Post Graduate\",\r\n                \"sMaritalStatus\": \"Single\",\r\n                \"sGender\": \"Female\",\r\n                \"sPANDetails\": \"CEKPJ4656Q\",\r\n                \"sDrivingLicenseNumber\": \"\",\r\n                \"sDrivingLicenseExpiry\": \"\",\r\n                \"sPassportNumber\": \"\",\r\n                \"sPassportExpiry\": \"\",\r\n                \"sVoterId\": \"\",\r\n                \"sAadhaarNumber\": \"\",\r\n                \"sAlternateMobileNumber\": \"\",\r\n                \"sMobileNumber\": \"9819876574\"\r\n            },\r\n            \"oPlatformDetails\": {\r\n                \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n                \"sSrcType\": \"Online Unassisted\",\r\n                \"sUniqueReferenceNumber\": \"12345678901\",\r\n                \"sCustomerIPAddress\": \"8.8.8.8\",\r\n                \"dtOTPConsentDatetime\": \"2022-09-29\",\r\n                \"sPartnerName\": \"Honda\",\r\n                \"sVendorCode\": \"123456\",\r\n                \"sBrokerId\": \"789\",\r\n                \"sLTSNumber\": \"123YG6\",\r\n                \"sBranchCode\": \"8787HHH\"\r\n            }\r\n        }\r\n    },\r\n    \"oExtensibleData\": {\r\n        \"sampleData\": \"sampleValue\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/enc_dec_util_high",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"enc_dec_util_high"
									]
								}
							},
							"response": []
						},
						{
							"name": "SQLInjectionDetected",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code == 422) \r",
											"tests[\"response http status code is 422\"] = true;\r",
											"else\r",
											"tests[\"response http status code is 422\"]= false;\r",
											"\r",
											"tests[\"Status code name Should be Unprocessable Entity\"] = responseCode.name.has(\"Unprocessable Entity\");\r",
											" \r",
											"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
											"tests[\"Response content-type is application/json\"] = true;\r",
											"else\r",
											"tests[\"Response content-type is application/json\"] = false;\r",
											"\r",
											"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\")  && responseBody.has(\"Status\"))\r",
											"tests[\"Response body contains all necessary fileds\"] = true;\r",
											"else\r",
											"tests[\"Response body contains all necessary fileds\"] = false;\r",
											"\r",
											"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
											"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
											"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
											"\r",
											"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
											"tests[\"response headers contains unnecessary headers\"]= false;\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"API",
										"create-TWL-loanApplication"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Signature verification Failed",
					"item": [
						{
							"name": "Success_create-TWL-loanApplication_Enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//ENCRYPTION UTILITY - Start\r",
											"var data = pm.response.json();\r",
											"\r",
											"var navigator = {};\r",
											"var window = {};\r",
											"eval(pm.globals.get(\"jsrsasign\"));\r",
											"\r",
											"//Generate JWT-start\r",
											"var header = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};\r",
											"var sHeader = JSON.stringify(header)+\"uswhned\";\r",
											"var sPayload = JSON.stringify(data);\r",
											"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, pm.globals.get(\"PARTNERPVTKEY\"));\r",
											"pm.environment.set('signedToken', sJWT);\r",
											"//Generate JWT-End\r",
											"\r",
											"//AES Encrypt-Generate Encrypted payload-start\r",
											"var payload = \"qwertyuiqwertyui\"+sJWT; //\r",
											"var key = \"asdfghjkasdfghjkasdfghjkasdfghjk\" //Random 32 byte key for every new request-required.\r",
											"var keyutf = CryptoJS.enc.Utf8.parse(key)\r",
											"var iv = CryptoJS.enc.Base64.parse(\"\")\r",
											"var encryptedText = CryptoJS.AES.encrypt(payload, keyutf, {iv}).toString();\r",
											"pm.environment.set(\"RSEV\", encryptedText)\r",
											"//AES Encrypt-Generate Encrypted payload-end\r",
											"\r",
											"//RSA Encrypt- 32 byte key encrypted-start\r",
											"var bankpubkeyObj = KEYUTIL.getKey(pm.globals.get(\"BANKPUBKEY\"));\r",
											"var encryptedkey = hextob64(KJUR.crypto.Cipher.encrypt(key, bankpubkeyObj,\"RSA\"))\r",
											"pm.environment.set(\"SEV\", encryptedkey)\r",
											"//RSA Encrypt- 32 byte key encrypted-end\r",
											"//ENCRYPTION UTILITY - End\r",
											"\r",
											"postman.setNextRequest(\"Signature verification Failed\");\r",
											"\r",
											"pm.test(\"SUCCESS\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"oMetadata\": {\r\n        \"sVersion\": \"UNASSISTED 1.0.0\",\r\n        \"dtTimeStamp\": \"2022-09-18\",\r\n        \"sRequestId\": \"rtgertg4545t45\",\r\n        \"sInstId\": \"4010\",\r\n        \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n        \"sSrcType\": \"ONLINE UNASSISTED\",\r\n        \"sSrcName\": \"Honda Motors\",\r\n        \"sSrcCode\": \"24647\",\r\n        \"sJourneyID\": \"1234567892\"\r\n    },\r\n    \"oPayload\": {\r\n        \"oBorrower\": {\r\n            \"oWorkDetails\": [\r\n                {\r\n                    \"sOfficeEmailId\": \"\",\r\n                    \"sOfficeTelephoneNumber\": \"123456\",\r\n                    \"sSTDCode\": \"0222\",\r\n                    \"sOfficeExtension\": \"\",\r\n                    \"sEmplType\": \"Salaried\",\r\n                    \"sEmplName\": \"I3 CONSULTING PRIVATE LIMITED.\",\r\n                    \"dNetMonthlyIncome\": \"50000\",\r\n                    \"dAnnualIncome\": \"\",\r\n                    \"iTmWithEmplr\": \"3\",\r\n                    \"sDesig\": \"Manager\",\r\n                    \"sWorkExps\": \"5\"\r\n                }\r\n            ],\r\n            \"aProductDetail\": [\r\n                {\r\n                    \"dOnRoadPrice\": 90000,\r\n                    \"dRequiredLoanAmount\": 50000,\r\n                    \"sSalesPromoCode\": \"\",\r\n                    \"sScheme\": \"\",\r\n                    \"sManufacturer\": \"HONDA MOTORCYCLE AND SCOOTER IN P LTD\",\r\n                    \"sModelNo\": \"HONDA ACTIVA 6G DLX BS VI\",\r\n                    \"sAssetModelMake\": \"ACTIVA\",\r\n                    \"iTenure\": \"18\"\r\n                }\r\n            ],\r\n            \"oCurrentAddress\": {\r\n                \"sOwnership\": \"OWNED BY SELF/SPOUSE\",\r\n                \"sLine1\": \"abcdef\",\r\n                \"sLine2\": \"abcdef\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"Mumbai\",\r\n                \"sState\": \"Maharashtra\",\r\n                \"sLandMark\": \"jfbvjh\",\r\n                \"iPinCode\": \"400011\",\r\n                \"iYearAtCity\": \"5\",\r\n                \"inoOfYearsAtResidence\": \"3\"\r\n            },\r\n            \"oCompanyAddress\": {\r\n                \"sLine1\": \"abcdefg\",\r\n                \"sLine2\": \"abcdefg\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"Mumbai\",\r\n                \"sState\": \"MAHARASHTRA\",\r\n                \"sLandMark\": \"hgdvfhsg\",\r\n                \"iPinCode\": \"400011\",\r\n                \"sArea\": \"\"\r\n            },\r\n            \"oPersonalDetails\": {\r\n                \"sFirstName\": \"sayali\",\r\n                \"sMiddleName\": \"\",\r\n                \"sLastName\": \"khismatrao\",\r\n                \"sDateOfBirth\": \"06041995\",\r\n                \"sEmailId\": \"sayali.khismatrao@hdfcbank.com\",\r\n                \"sEducationQualification\": \"Post Graduate\",\r\n                \"sMaritalStatus\": \"Single\",\r\n                \"sGender\": \"Female\",\r\n                \"sPANDetails\": \"CEKPJ4656Q\",\r\n                \"sDrivingLicenseNumber\": \"\",\r\n                \"sDrivingLicenseExpiry\": \"\",\r\n                \"sPassportNumber\": \"\",\r\n                \"sPassportExpiry\": \"\",\r\n                \"sVoterId\": \"\",\r\n                \"sAadhaarNumber\": \"\",\r\n                \"sAlternateMobileNumber\": \"\",\r\n                \"sMobileNumber\": \"9819876574\"\r\n            },\r\n            \"oPlatformDetails\": {\r\n                \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n                \"sSrcType\": \"Online Unassisted\",\r\n                \"sUniqueReferenceNumber\": \"12345678901\",\r\n                \"sCustomerIPAddress\": \"8.8.8.8\",\r\n                \"dtOTPConsentDatetime\": \"2022-09-29\",\r\n                \"sPartnerName\": \"Honda\",\r\n                \"sVendorCode\": \"123456\",\r\n                \"sBrokerId\": \"789\",\r\n                \"sLTSNumber\": \"123YG6\",\r\n                \"sBranchCode\": \"8787HHH\"\r\n            }\r\n        }\r\n    },\r\n    \"oExtensibleData\": {\r\n        \"sampleData\": \"sampleValue\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/enc_dec_util_high",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"enc_dec_util_high"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signature verification Failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code == 401) \r",
											"tests[\"response http status code is 401\"] = true;\r",
											"else\r",
											"tests[\"response http status code is 401\"]= false;\r",
											"\r",
											"tests[\"Status code name Should be Unauthorized\"] = responseCode.name.has(\"Unauthorized\");\r",
											" \r",
											"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
											"tests[\"Response content-type is application/json\"] = true;\r",
											"else\r",
											"tests[\"Response content-type is application/json\"] = false;\r",
											"\r",
											"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\") && responseBody.has(\"Status\"))\r",
											"tests[\"Response body contains all necessary fileds\"] = true;\r",
											"else\r",
											"tests[\"Response body contains all necessary fileds\"] = false;\r",
											"\r",
											"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
											"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
											"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
											"\r",
											"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
											"tests[\"response headers contains unnecessary headers\"]= false;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"KrGiBB0dTxqzY5kssZnXf8ue55iznIg/oM9BOIpVQKbeN8w9LpxeUT9YZLf71htBqLh6tpw8jTdSFhaHeXJ7ZObwc6zS3/VLSyXUNYdsqv8BncYc/yquXqrgP3E58kA7HQmnlcQJSHyZxSW5nh0fw26wmRq60EzzYUdRyyKpBsQkFNn+bkjfTytW7/IXv/540ILvnQS5DIRwqcwwdTJyHxPaSzw1kWtXcpC/c72NvXjnE/lLoSVov9uS/ftrYxp/Ges3O5TkE+WOQpIQCx5d+lVmpO4D0wS61aFEghpMbdOKPf1L6A5xOI9EDaz/ZXrqPrxdEHGE/x2qv4ZA7iH+kgZbcLaO8v8OEBe/PTYlrlLJmbj5InFzREVByHNbrBBbg9uKJSMmuVta2+yl9qMR17A9n988FsKpCOZfZrUaeTD/dS45uDFqPgc/25HMoxdza7/6IW0Uws9fz4RMP2zG59rOIX5ap+MUeXvrbpWjbDzXoGt0Jca1w3DHCUy+xxgmVVLDa00p47e6Whr2dzW5thC44sesNYftJGXwaCyJdZyXQUE/i4Ky6+AZB9YQ4R00cPC5bA8X8eLwDg7EtwiszRIyWUAIZB0tWyZBIBgLUTN8HtVGitLiH4o97abi032fYQBaeiLK/4T2Q0wmxXGSzXtHbZ6S71vumoDE4DUF2jMAZfVw1BwJnWBsjpgthZvgiiDyU7GtimyHUTSAe6pvHWtriratwoF1+6NeuGnNwSlFsX6G0vKfZeEmFPH0rv3cqyURJOLyIuJlRMXB3nulkRQyKGRjeth+jV6JeFr+NkBPdIT9GId8OFxIqtvuFuqBfjbUaoA65NqOACoA0sMJNKhIRB8d215qA0DaK4zOH00s1ASoOIs0oxuZUAsfjI9iRgGtpFIiT1E1PCY0t0msj0qWu1H999IupDtQyviD1+LDe1YlXlc4UYqIkbuVtgFFH1+xuG8R3OhxqW1uEHGX8/YJcSRVa4YBSHwEqRZO9ck6DWYKTMC7+d9tp6ddaaub3aenyWN6X66TK4lL5dU71IQL2irp3pGWAeNnnfVcgnQ7YtJk6bU+XZmd1fzmsDdKGH4W6EIkMoOrFOiJj7YJRH2b9E601IbyI0Q0vW+0ggrxik/XOigat4OpWtmZ1hit2+ZaAxsa4IQvKepCXzyqxfFl0Lm3Jo79KTVl3GuaT93jC7jGH2qxylBo5EFhq6RMA0NZKjVFN8Ph5prgSZmlMHUajazHboapB0tCHaK5Yiyv3gybHr0DVM8X8rRcrvEudbmKsbXY6gKEUrntf2r8Q00o9dWQJSNcYjZtKftFphakgFsioixzRagGp3omoWWfXVMRr4/5R299lYBqzXjmXb7/4lqeY8jWLWqg6nWu2SDIp8BkLunDUFeck+ui70qtGofZJJuQ8OEP5KyaLyccSB46bMiIiD/zt+Jda4ar6niNA2PAt/UlmtZwpgKZpSRNKNe3xZhhnPJk3LVb4zEM7JohHd1QsDCTzfxnoeDFrluLwrQMhiQhf9IrGfHag+rfJ4J4hwqgYWpTcgkI3ZGWcNY4nKsQC3XfK5DretbWe+2iSfn7XxR87MNSPxi+XGvdC/5LOcB0WrZLfojSfDP5+Qt0tODP8fyxQSbJ+O6ZfLKHDZBRxnGRILzCmh8I/M1N/1x3sTyybOMMbbzg9unZk1xRN+2f+Rc7KYHOuC4iK2cChjM0JoxS4dQCUVdZTm8qc/C4x66JnWrEdG5GEUbHxnCe9H1pEShHS2HMpg7Z9opnIXO0v547gi6lgE+Aiqi0438HlAJ3v6p9W076P6h7ADiC5++J+/DXpUtao2MHF2gvlJjENYlwM8DkmzaPlM3GwNFOcZ5vQDbktJEllhiWN/xwEdDYv5n1Kts/SRY7OybPCflKzsWOiG//sR2hNCKByhCjeXsmnv/s1+0oReV1sdG9FaVwr88dxd5bsOsZiNui7cXtOoHPIEodTPXHI3x77yg9Y/yD+6kZSExntVAjyragxrsCLSkm8E0nf+L/DvtXJoBxb1MCtVfhW5gtVguKk+liY4KwMBd6BRSPyhQ2fEg1j0GJxfIUMvnk3LVDYbNtjAL9VPEp9AonZpdFYbxJllx75eWzCu9rlkPW3+mdXl4AsP+KRD3iQ9JFaCw8SXZ0nb3cJuzQmnxreNYv9YY3JdIz8QK2e+60/vSuoPxMWAe9VYSaUYG4g4ZNhbbtp9JrihoFHm6TErC5hO9IsA/VQ7xREStp2pSw4V1JvH+h99Uv4JHc7o8F+LutPK7TGBMIdD4nZwmueFxCUvY5uRRr22Bx9WX1N8DZD7ikLp2TOkJeaZOJ4tX+n8SPDLHpx66W3Cr/W84dZzE/3/LQPHgBzZjZoXmiSuqv1kOMsnD01+JwMMKJT22gi9ulu52RDL+vPIEajivBY6B1IFA4n+aPLa4guz6gfhGc1s2flVKKvHhpysYbi3IRTeNfIwrTa/p4SRH70La8BMc4+6E4kviivkDzezCBba16F7mI9/KK4FQssPZx58pGhLWFGgF1bP96+yFStRtLGHiAJbDSndpqXtdY30X32AP8fbw7TzS5zJd23lLJgdL/e+YXS2taT96VH51Jx4a1l2/AjunvjtmkcelvqHpr/wu+MTrwD1/fEQqFvMlATizUViyjdgVNAga+8TQNVZAUUEhay/Fhoc2YzuzXc/wv5QYSXaOcjrJP0TrjKqvxzqdpX5aELL28GMZcblraqSEKrY51pE+Kn7VUA9eZ+VA1oZmz1VPFYyudPGQ3YjKyR9FOV32+A6OXjf5oApjLooyRJJ2hufQ46KEUtWwZGL8DBk2g5lIqQVjbvZUAiTEPUchDB5VyBgz12HchUOFvWraokAYtc2Az9IgBFNSRFa86x1b82s9UU9TRAuN5dO/xr1Ejzj6p9IbFP6n8xkOekYAG8X4qaE9ljlHu2GGiwzrU4tsjX7blSNwKEbJ9+vL5d+XqqgnQKRiw6FceAl8dTs7J8gCwHPoZaWtDB5gVzg83MWBMyi7tylRz7S/kwMwZ6qE079wzU4q2V8lx1FDWcwyqxgFOfl5KtKMr+E8eRp8wtwsDcK/pF9H8nlg5wiTagpqPkHFBNjaoKGdIbCBTrLajJyXHCEaRaP879ZTqORLRxhIJdi6fQV0pAThtlDyONnVZ63Pg9EeQo3vDo8MRM+c3IXluN0HDAlYETP4yPNsiF42PI9IKe6H75EI6nOSCEofZP4mgYBUXlJcJ1w9DV+Y+KztCHowDuoy57imF3nV7ferdEJuiCLHm//72gRTguLKP9wLBW0wKIeeEqJTW35yiCHwa0TAtCMaaJKuxe+bk9CJrdf+Gqcc4ErQZghNzA0Csit2Ak9f2UcAwXLCDm5LcA53DzG8KGHt1fF83FRwFCfivtgXwfTTRBlV78nQhUO7bCcxvtBMvwVPRAakJz0PuLm9vBJo7McwhQ7973enudbVxJeXiRNiTXftliuc3JaN+I/5V6e1oJik=\",\r\n    \"SymmetricKeyEncryptedValue\": \"bmKp59z5p63TELejzgbuNjAlzCeYNUZW9q3AisBshrOVazJ76YpAJ+u9CeUwVjRY7R7hukBPOoPBJuabpceF7CRb812cIxD4hJ4Dro4IKQFZIoQ3O2zIOSkhX9+HrjurbrlCdgPWS8TA66oEXXHZ00X39XIEq+rb5vre/4vYYasjUajU3gSfCTzrf/Vv1+2qBYX90HcJnTu5QYl7sCJsA/IoLvVio/NLfFdd89SCdRHid94uoWPBOLRSylmu0eLFKD0ajiI2ed0O0v0zmPlZ/TnYk933uMRNDFnpgEFSUdO4RVdIbWKBBLVvCJ4gXtiPNhM85nG0JX22eKSPs/+ZZw==\",\r\n    \"Scope\": \"Snehal_Test\",\r\n    \"TransactionId\": \"abcdefg\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"API",
										"create-TWL-loanApplication"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Code Injection Detected",
					"item": [
						{
							"name": "Success_create-TWL-loanApplication_Enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//ENCRYPTION UTILITY - Start\r",
											"var data = pm.response.json();\r",
											"\r",
											"var navigator = {};\r",
											"var window = {};\r",
											"eval(pm.globals.get(\"jsrsasign\"));\r",
											"\r",
											"//Generate JWT-start\r",
											"var header = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};\r",
											"var sHeader = JSON.stringify(header);\r",
											"var sPayload = JSON.stringify(data);\r",
											"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, pm.globals.get(\"PARTNERPVTKEY\"));\r",
											"pm.environment.set('signedToken', sJWT);\r",
											"//Generate JWT-End\r",
											"\r",
											"//AES Encrypt-Generate Encrypted payload-start\r",
											"var payload = \"qwertyuiqwertyui\"+sJWT; //\r",
											"var key = \"asdfghjkasdfghjkasdfghjkasdfghjk\" //Random 32 byte key for every new request-required.\r",
											"var keyutf = CryptoJS.enc.Utf8.parse(key)\r",
											"var iv = CryptoJS.enc.Base64.parse(\"\")\r",
											"var encryptedText = CryptoJS.AES.encrypt(payload, keyutf, {iv}).toString();\r",
											"pm.environment.set(\"RSEV\", encryptedText)\r",
											"//AES Encrypt-Generate Encrypted payload-end\r",
											"\r",
											"//RSA Encrypt- 32 byte key encrypted-start\r",
											"var bankpubkeyObj = KEYUTIL.getKey(pm.globals.get(\"BANKPUBKEY\"));\r",
											"var encryptedkey = hextob64(KJUR.crypto.Cipher.encrypt(key, bankpubkeyObj,\"RSA\"))\r",
											"pm.environment.set(\"SEV\", encryptedkey)\r",
											"//RSA Encrypt- 32 byte key encrypted-end\r",
											"//ENCRYPTION UTILITY - End\r",
											"\r",
											"postman.setNextRequest(\"Code Injection Detected\");\r",
											"\r",
											"pm.test(\"SUCCESS\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"oMetadata\": {\r\n        \"sVersion\": \"UNASSISTED 1.0.0\",\r\n        \"dtTimeStamp\": \"2022-09-18\",\r\n        \"sRequestId\": \"<>rtgertg4545t45\",\r\n        \"sInstId\": \"4010\",\r\n        \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n        \"sSrcType\": \"ONLINE UNASSISTED\",\r\n        \"sSrcName\": \"Honda Motors\",\r\n        \"sSrcCode\": \"24647\",\r\n        \"sJourneyID\": \"1234567892\"\r\n    },\r\n    \"oPayload\": {\r\n        \"oBorrower\": {\r\n            \"oWorkDetails\": [\r\n                {\r\n                    \"sOfficeEmailId\": \"\",\r\n                    \"sOfficeTelephoneNumber\": \"123456\",\r\n                    \"sSTDCode\": \"0222\",\r\n                    \"sOfficeExtension\": \"\",\r\n                    \"sEmplType\": \"Salaried\",\r\n                    \"sEmplName\": \"I3 CONSULTING PRIVATE LIMITED.\",\r\n                    \"dNetMonthlyIncome\": \"50000\",\r\n                    \"dAnnualIncome\": \"\",\r\n                    \"iTmWithEmplr\": \"3\",\r\n                    \"sDesig\": \"Manager\",\r\n                    \"sWorkExps\": \"5\"\r\n                }\r\n            ],\r\n            \"aProductDetail\": [\r\n                {\r\n                    \"dOnRoadPrice\": 90000,\r\n                    \"dRequiredLoanAmount\": 50000,\r\n                    \"sSalesPromoCode\": \"\",\r\n                    \"sScheme\": \"\",\r\n                    \"sManufacturer\": \"HONDA MOTORCYCLE AND SCOOTER IN P LTD\",\r\n                    \"sModelNo\": \"HONDA ACTIVA 6G DLX BS VI\",\r\n                    \"sAssetModelMake\": \"ACTIVA\",\r\n                    \"iTenure\": \"18\"\r\n                }\r\n            ],\r\n            \"oCurrentAddress\": {\r\n                \"sOwnership\": \"OWNED BY SELF/SPOUSE\",\r\n                \"sLine1\": \"abcdef\",\r\n                \"sLine2\": \"abcdef\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"Mumbai\",\r\n                \"sState\": \"Maharashtra\",\r\n                \"sLandMark\": \"jfbvjh\",\r\n                \"iPinCode\": \"400011\",\r\n                \"iYearAtCity\": \"5\",\r\n                \"inoOfYearsAtResidence\": \"3\"\r\n            },\r\n            \"oCompanyAddress\": {\r\n                \"sLine1\": \"abcdefg\",\r\n                \"sLine2\": \"abcdefg\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"Mumbai\",\r\n                \"sState\": \"MAHARASHTRA\",\r\n                \"sLandMark\": \"hgdvfhsg\",\r\n                \"iPinCode\": \"400011\",\r\n                \"sArea\": \"\"\r\n            },\r\n            \"oPersonalDetails\": {\r\n                \"sFirstName\": \"sayali\",\r\n                \"sMiddleName\": \"\",\r\n                \"sLastName\": \"khismatrao\",\r\n                \"sDateOfBirth\": \"06041995\",\r\n                \"sEmailId\": \"sayali.khismatrao@hdfcbank.com\",\r\n                \"sEducationQualification\": \"Post Graduate\",\r\n                \"sMaritalStatus\": \"Single\",\r\n                \"sGender\": \"Female\",\r\n                \"sPANDetails\": \"CEKPJ4656Q\",\r\n                \"sDrivingLicenseNumber\": \"\",\r\n                \"sDrivingLicenseExpiry\": \"\",\r\n                \"sPassportNumber\": \"\",\r\n                \"sPassportExpiry\": \"\",\r\n                \"sVoterId\": \"\",\r\n                \"sAadhaarNumber\": \"\",\r\n                \"sAlternateMobileNumber\": \"\",\r\n                \"sMobileNumber\": \"9819876574\"\r\n            },\r\n            \"oPlatformDetails\": {\r\n                \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n                \"sSrcType\": \"Online Unassisted\",\r\n                \"sUniqueReferenceNumber\": \"12345678901\",\r\n                \"sCustomerIPAddress\": \"8.8.8.8\",\r\n                \"dtOTPConsentDatetime\": \"2022-09-29\",\r\n                \"sPartnerName\": \"Honda\",\r\n                \"sVendorCode\": \"123456\",\r\n                \"sBrokerId\": \"789\",\r\n                \"sLTSNumber\": \"123YG6\",\r\n                \"sBranchCode\": \"8787HHH\"\r\n            }\r\n        }\r\n    },\r\n    \"oExtensibleData\": {\r\n        \"sampleData\": \"sampleValue\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/enc_dec_util_high",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"enc_dec_util_high"
									]
								}
							},
							"response": []
						},
						{
							"name": "Code Injection Detected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code == 400) \r",
											"tests[\"response http status code is 400\"] = true;\r",
											"else\r",
											"tests[\"response http status code is 400\"]= false;\r",
											"\r",
											"tests[\"Status code name Should be Bad Request\"] = responseCode.name.has(\"Bad Request\");\r",
											" \r",
											"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
											"tests[\"Response content-type is application/json\"] = true;\r",
											"else\r",
											"tests[\"Response content-type is application/json\"] = false;\r",
											"\r",
											"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\")  && responseBody.has(\"Status\"))\r",
											"tests[\"Response body contains all necessary fileds\"] = true;\r",
											"else\r",
											"tests[\"Response body contains all necessary fileds\"] = false;\r",
											"\r",
											"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
											"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
											"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
											"\r",
											"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
											"tests[\"response headers contains unnecessary headers\"]= false;\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"API",
										"create-TWL-loanApplication"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Document Structure Threat",
					"item": [
						{
							"name": "Success_create-TWL-loanApplication_Enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//ENCRYPTION UTILITY - Start\r",
											"var data = pm.response.json();\r",
											"\r",
											"var navigator = {};\r",
											"var window = {};\r",
											"eval(pm.globals.get(\"jsrsasign\"));\r",
											"\r",
											"//Generate JWT-start\r",
											"var header = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};\r",
											"var sHeader = JSON.stringify(header);\r",
											"var sPayload = JSON.stringify(data);\r",
											"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, pm.globals.get(\"PARTNERPVTKEY\"));\r",
											"pm.environment.set('signedToken', sJWT);\r",
											"//Generate JWT-End\r",
											"\r",
											"//AES Encrypt-Generate Encrypted payload-start\r",
											"var payload = \"qwertyuiqwertyui\"+sJWT; //\r",
											"var key = \"asdfghjkasdfghjkasdfghjkasdfghjk\" //Random 32 byte key for every new request-required.\r",
											"var keyutf = CryptoJS.enc.Utf8.parse(key)\r",
											"var iv = CryptoJS.enc.Base64.parse(\"\")\r",
											"var encryptedText = CryptoJS.AES.encrypt(payload, keyutf, {iv}).toString();\r",
											"pm.environment.set(\"RSEV\", encryptedText)\r",
											"//AES Encrypt-Generate Encrypted payload-end\r",
											"\r",
											"//RSA Encrypt- 32 byte key encrypted-start\r",
											"var bankpubkeyObj = KEYUTIL.getKey(pm.globals.get(\"BANKPUBKEY\"));\r",
											"var encryptedkey = hextob64(KJUR.crypto.Cipher.encrypt(key, bankpubkeyObj,\"RSA\"))\r",
											"pm.environment.set(\"SEV\", encryptedkey)\r",
											"//RSA Encrypt- 32 byte key encrypted-end\r",
											"//ENCRYPTION UTILITY - End\r",
											"\r",
											"postman.setNextRequest(\"Document Structure Threat\");\r",
											"\r",
											"pm.test(\"SUCCESS\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"metadata\": {\r\n        \"version\": \"2.0\",\r\n        \"timestamp\": \"2021-12-06T11:39:57.153Z\",\r\n        \"traceId\": \"TEST6822bd4bbb4eb1b9e1b4996fbff8ac1\",\r\n        \"orgId\": \"REL001\"\r\n    },\r\n    \"requestId\": \"TEST6822bd4bbb4eb1b9e1b4996fbff8ac1\",\r\n    \"loanApplications\": [\r\n        {\r\n            \"createdDate\": \"2021-12-06T00:00:00Z\",\r\n            \"loanApplicationId\": \"TEST6822bd4bbb4eb1b9e1b4996fbff8ac1\",\r\n            \"productType\": \"CONSUMER_DURABLE\",\r\n            \"productId\": \"CONSUMER_DURABLE_OFFER\",\r\n            \"borrower\": {\r\n                \"primaryId\": \"CPAA1234A\",\r\n                \"primaryIdType\": \"PAN\",\r\n                \"category\": \"INDIVIDUAL\",\r\n                \"contactDetails\": [\r\n                    {\r\n                        \"type\": \"PRIMARY\",\r\n                        \"phone\": \"9551125410\"\r\n                    }\r\n                ]\r\n            },\r\n            \"terms\": {\r\n                \"requestedAmount\": \"50000.00\",\r\n                \"currency\": \"INR\",\r\n                \"filler9\": \"\"\r\n            }\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/enc_dec_util_high",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"enc_dec_util_high"
									]
								}
							},
							"response": []
						},
						{
							"name": "Document Structure Threat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code == 421) \r",
											"tests[\"response http status code is 421\"] = true;\r",
											"else\r",
											"tests[\"response http status code is 421\"]= false;\r",
											"\r",
											"tests[\"Status code name Should be Misdirected Request\"] = responseCode.name.has(\"Misdirected Request\");\r",
											" \r",
											"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
											"tests[\"Response content-type is application/json\"] = true;\r",
											"else\r",
											"tests[\"Response content-type is application/json\"] = false;\r",
											"\r",
											"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\")  && responseBody.has(\"Status\"))\r",
											"tests[\"Response body contains all necessary fileds\"] = true;\r",
											"else\r",
											"tests[\"Response body contains all necessary fileds\"] = false;\r",
											"\r",
											"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
											"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
											"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
											"\r",
											"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
											"tests[\"response headers contains unnecessary headers\"]= false;\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"API",
										"create-TWL-loanApplication"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Decryption Failed",
					"item": [
						{
							"name": "Success_create-TWL-loanApplication_Enc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//ENCRYPTION UTILITY - Start\r",
											"var data = pm.response.json();\r",
											"\r",
											"var navigator = {};\r",
											"var window = {};\r",
											"eval(pm.globals.get(\"jsrsasign\"));\r",
											"\r",
											"//Generate JWT-start\r",
											"var header = {\"alg\" : \"RS256\",\"typ\" : \"JWT\"};\r",
											"var sHeader = JSON.stringify(header);\r",
											"var sPayload = JSON.stringify(data);\r",
											"var sJWT = KJUR.jws.JWS.sign(header.alg, sHeader, sPayload, pm.globals.get(\"PARTNERPVTKEY\"));\r",
											"pm.environment.set('signedToken', sJWT);\r",
											"//Generate JWT-End\r",
											"\r",
											"//AES Encrypt-Generate Encrypted payload-start\r",
											"var payload = \"qwertyuiqwertyui\"+sJWT; //\r",
											"var key = \"sdfghjkasdfghjkasdfghjkasdfghjk\" //Random 32 byte key for every new request-required.\r",
											"var keyutf = CryptoJS.enc.Utf8.parse(key)\r",
											"var iv = CryptoJS.enc.Base64.parse(\"\")\r",
											"var encryptedText = CryptoJS.AES.encrypt(payload, keyutf, {iv}).toString();\r",
											"pm.environment.set(\"RSEV\", encryptedText)\r",
											"//AES Encrypt-Generate Encrypted payload-end\r",
											"\r",
											"//RSA Encrypt- 32 byte key encrypted-start\r",
											"var bankpubkeyObj = KEYUTIL.getKey(pm.globals.get(\"BANKPUBKEY\"));\r",
											"var encryptedkey = hextob64(KJUR.crypto.Cipher.encrypt(key, bankpubkeyObj,\"RSA\"))\r",
											"pm.environment.set(\"SEV\", encryptedkey)\r",
											"//RSA Encrypt- 32 byte key encrypted-end\r",
											"//ENCRYPTION UTILITY - End\r",
											"\r",
											"postman.setNextRequest(\"Decryption Failed\");\r",
											"\r",
											"pm.test(\"SUCCESS\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"oMetadata\": {\r\n        \"sVersion\": \"UNASSISTED 1.0.0\",\r\n        \"dtTimeStamp\": \"2022-09-18\",\r\n        \"sRequestId\": \"rtgertg4545t45\",\r\n        \"sInstId\": \"4010\",\r\n        \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n        \"sSrcType\": \"ONLINE UNASSISTED\",\r\n        \"sSrcName\": \"Honda Motors\",\r\n        \"sSrcCode\": \"24647\",\r\n        \"sJourneyID\": \"1234567892\"\r\n    },\r\n    \"oPayload\": {\r\n        \"oBorrower\": {\r\n            \"oWorkDetails\": [\r\n                {\r\n                    \"sOfficeEmailId\": \"\",\r\n                    \"sOfficeTelephoneNumber\": \"123456\",\r\n                    \"sSTDCode\": \"0222\",\r\n                    \"sOfficeExtension\": \"\",\r\n                    \"sEmplType\": \"Salaried\",\r\n                    \"sEmplName\": \"I3 CONSULTING PRIVATE LIMITED.\",\r\n                    \"dNetMonthlyIncome\": \"50000\",\r\n                    \"dAnnualIncome\": \"\",\r\n                    \"iTmWithEmplr\": \"3\",\r\n                    \"sDesig\": \"Manager\",\r\n                    \"sWorkExps\": \"5\"\r\n                }\r\n            ],\r\n            \"aProductDetail\": [\r\n                {\r\n                    \"dOnRoadPrice\": 90000,\r\n                    \"dRequiredLoanAmount\": 50000,\r\n                    \"sSalesPromoCode\": \"\",\r\n                    \"sScheme\": \"\",\r\n                    \"sManufacturer\": \"HONDA MOTORCYCLE AND SCOOTER IN P LTD\",\r\n                    \"sModelNo\": \"HONDA ACTIVA 6G DLX BS VI\",\r\n                    \"sAssetModelMake\": \"ACTIVA\",\r\n                    \"iTenure\": \"18\"\r\n                }\r\n            ],\r\n            \"oCurrentAddress\": {\r\n                \"sOwnership\": \"OWNED BY SELF/SPOUSE\",\r\n                \"sLine1\": \"abcdef\",\r\n                \"sLine2\": \"abcdef\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"Mumbai\",\r\n                \"sState\": \"Maharashtra\",\r\n                \"sLandMark\": \"jfbvjh\",\r\n                \"iPinCode\": \"400011\",\r\n                \"iYearAtCity\": \"5\",\r\n                \"inoOfYearsAtResidence\": \"3\"\r\n            },\r\n            \"oCompanyAddress\": {\r\n                \"sLine1\": \"abcdefg\",\r\n                \"sLine2\": \"abcdefg\",\r\n                \"sLine3\": \"\",\r\n                \"sCity\": \"Mumbai\",\r\n                \"sState\": \"MAHARASHTRA\",\r\n                \"sLandMark\": \"hgdvfhsg\",\r\n                \"iPinCode\": \"400011\",\r\n                \"sArea\": \"\"\r\n            },\r\n            \"oPersonalDetails\": {\r\n                \"sFirstName\": \"sayali\",\r\n                \"sMiddleName\": \"\",\r\n                \"sLastName\": \"khismatrao\",\r\n                \"sDateOfBirth\": \"06041995\",\r\n                \"sEmailId\": \"sayali.khismatrao@hdfcbank.com\",\r\n                \"sEducationQualification\": \"Post Graduate\",\r\n                \"sMaritalStatus\": \"Single\",\r\n                \"sGender\": \"Female\",\r\n                \"sPANDetails\": \"CEKPJ4656Q\",\r\n                \"sDrivingLicenseNumber\": \"\",\r\n                \"sDrivingLicenseExpiry\": \"\",\r\n                \"sPassportNumber\": \"\",\r\n                \"sPassportExpiry\": \"\",\r\n                \"sVoterId\": \"\",\r\n                \"sAadhaarNumber\": \"\",\r\n                \"sAlternateMobileNumber\": \"\",\r\n                \"sMobileNumber\": \"9819876574\"\r\n            },\r\n            \"oPlatformDetails\": {\r\n                \"sLoanType\": \"TWO_WHEELER_LOAN\",\r\n                \"sSrcType\": \"Online Unassisted\",\r\n                \"sUniqueReferenceNumber\": \"12345678901\",\r\n                \"sCustomerIPAddress\": \"8.8.8.8\",\r\n                \"dtOTPConsentDatetime\": \"2022-09-29\",\r\n                \"sPartnerName\": \"Honda\",\r\n                \"sVendorCode\": \"123456\",\r\n                \"sBrokerId\": \"789\",\r\n                \"sLTSNumber\": \"123YG6\",\r\n                \"sBranchCode\": \"8787HHH\"\r\n            }\r\n        }\r\n    },\r\n    \"oExtensibleData\": {\r\n        \"sampleData\": \"sampleValue\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/enc_dec_util_high",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"enc_dec_util_high"
									]
								}
							},
							"response": []
						},
						{
							"name": "Decryption Failed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (responseCode.code == 400) \r",
											"tests[\"response http status code is 400\"] = true;\r",
											"else\r",
											"tests[\"response http status code is 400\"]= false;\r",
											"\r",
											"tests[\"Status code name Should be Bad Request\"] = responseCode.name.has(\"Bad Request\");\r",
											" \r",
											"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
											"tests[\"Response content-type is application/json\"] = true;\r",
											"else\r",
											"tests[\"Response content-type is application/json\"] = false;\r",
											"\r",
											"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\") && responseBody.has(\"Status\"))\r",
											"tests[\"Response body contains all necessary fileds\"] = true;\r",
											"else\r",
											"tests[\"Response body contains all necessary fileds\"] = false;\r",
											"\r",
											"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
											"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
											"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
											"\r",
											"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
											"tests[\"response headers contains unnecessary headers\"]= false;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "apikey",
										"value": "{{apikey}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
									"protocol": "https",
									"host": [
										"{{hostname}}"
									],
									"path": [
										"API",
										"create-TWL-loanApplication"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code == 401) \r",
									"tests[\"response http status code is 401\"] = true;\r",
									"else\r",
									"tests[\"response http status code is 401\"]= false;\r",
									"\r",
									"tests[\"Status code name Should be Unauthorized\"] = responseCode.name.has(\"Unauthorized\");\r",
									" \r",
									"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
									"tests[\"Response content-type is application/json\"] = true;\r",
									"else\r",
									"tests[\"Response content-type is application/json\"] = false;\r",
									"\r",
									"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\") && responseBody.has(\"Status\"))\r",
									"tests[\"Response body contains all necessary fileds\"] = true;\r",
									"else\r",
									"tests[\"Response body contains all necessary fileds\"] = false;\r",
									"\r",
									"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
									"tests[\"response headers contains unnecessary headers\"]= false;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "u32vE45uWGeDoPuLTmPVqzmdGaAryvlYy6NMBxeBS9Kw",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"API",
								"create-TWL-loanApplication"
							]
						}
					},
					"response": []
				},
				{
					"name": "Content Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code == 404) \r",
									"tests[\"response http status code is 404\"] = true;\r",
									"else\r",
									"tests[\"response http status code is 404\"]= false;\r",
									"\r",
									"tests[\"Status code name Should be Not Found\"] = responseCode.name.has(\"Not Found\");\r",
									" \r",
									"if(postman.getResponseHeader(\"Content-Type\") ==\"text/plain\")\r",
									"tests[\"Response content-type is text/plain\"] = true;\r",
									"else\r",
									"tests[\"Response content-type is text/plain\"] = false;\r",
									"\r",
									"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
									"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
									"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
									"\r",
									"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
									"tests[\"response headers contains unnecessary headers\"]= false;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"{{hdfc_access_token}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/API/create-TWL-loanApplication/abcd",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"API",
								"create-TWL-loanApplication",
								"abcd"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request Method Not Allowed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code == 405) \r",
									"tests[\"response http status code is 405\"] = true;\r",
									"else\r",
									"tests[\"response http status code is 405\"]= false;\r",
									"\r",
									"tests[\"Status code name Should be Method Not Allowed\"] = responseCode.name.has(\"Method Not Allowed\");\r",
									" \r",
									"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
									"tests[\"Response content-type is application/json\"] = true;\r",
									"else\r",
									"tests[\"Response content-type is application/json\"] = false;\r",
									"\r",
									"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\") && responseBody.has(\"Status\"))\r",
									"tests[\"Response body contains all necessary fileds\"] = true;\r",
									"else\r",
									"tests[\"Response body contains all necessary fileds\"] = false;\r",
									"\r",
									"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
									"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
									"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
									"\r",
									"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
									"tests[\"response headers contains unnecessary headers\"]= false;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"API",
								"create-TWL-loanApplication"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code == 411) \r",
									"tests[\"response http status code is 411\"] = true;\r",
									"else\r",
									"tests[\"response http status code is 411\"]= false;\r",
									"\r",
									"tests[\"Status code name Should be Length Required\"] = responseCode.name.has(\"Length Required\");\r",
									" \r",
									"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
									"tests[\"Response content-type is application/json\"] = true;\r",
									"else\r",
									"tests[\"Response content-type is application/json\"] = false;\r",
									"\r",
									"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\") && responseBody.has(\"Status\"))\r",
									"tests[\"Response body contains all necessary fileds\"] = true;\r",
									"else\r",
									"tests[\"Response body contains all necessary fileds\"] = false;\r",
									"\r",
									"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
									"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
									"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
									"\r",
									"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
									"tests[\"response headers contains unnecessary headers\"]= false;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"API",
								"create-TWL-loanApplication"
							]
						}
					},
					"response": []
				},
				{
					"name": "Scope Validation Failed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code == 401) \r",
									"tests[\"response http status code is 401\"] = true;\r",
									"else\r",
									"tests[\"response http status code is 401\"]= false;\r",
									"\r",
									"tests[\"Status code name Should be Unauthorized\"] = responseCode.name.has(\"Unauthorized\");\r",
									" \r",
									"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
									"tests[\"Response content-type is application/json\"] = true;\r",
									"else\r",
									"tests[\"Response content-type is application/json\"] = false;\r",
									"\r",
									"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\") && responseBody.has(\"Status\"))\r",
									"tests[\"Response body contains all necessary fileds\"] = true;\r",
									"else\r",
									"tests[\"Response body contains all necessary fileds\"] = false;\r",
									"\r",
									"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
									"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
									"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
									"\r",
									"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
									"tests[\"response headers contains unnecessary headers\"]= false;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"API",
								"create-TWL-loanApplication"
							]
						}
					},
					"response": []
				},
				{
					"name": "Bad Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code == 400) \r",
									"tests[\"response http status code is 400\"] = true;\r",
									"else\r",
									"tests[\"response http status code is 400\"]= false;\r",
									"\r",
									"tests[\"Status code name Should be Bad Request\"] = responseCode.name.has(\"Bad Request\");\r",
									" \r",
									"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
									"tests[\"Response content-type is application/json\"] = true;\r",
									"else\r",
									"tests[\"Response content-type is application/json\"] = false;\r",
									"\r",
									"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\") && responseBody.has(\"Status\"))\r",
									"tests[\"Response body contains all necessary fileds\"] = true;\r",
									"else\r",
									"tests[\"Response body contains all necessary fileds\"] = false;\r",
									"\r",
									"tests[\"x-quota-remaining is present\"] = postman.getResponseHeader(\"x-quota-remaining\");\r",
									"tests[\"x-quota-allowed is present\"] = postman.getResponseHeader(\"x-quota-allowed\") ;\r",
									"tests[\"x-quota-reset-time is present\"] = postman.getResponseHeader(\"x-quota-reset-time\") ;\r",
									"\r",
									"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
									"tests[\"response headers contains unnecessary headers\"]= false;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"API",
								"create-TWL-loanApplication"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cross Site Forgery Detected",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (responseCode.code == 410) \r",
									"tests[\"response http status code is 410\"] = true;\r",
									"else\r",
									"tests[\"response http status code is 410\"]= false;\r",
									"\r",
									"tests[\"Status code name Should be Gone\"] = responseCode.name.has(\"Gone\");\r",
									" \r",
									"if(postman.getResponseHeader(\"Content-Type\") ==\"application/json\")\r",
									"tests[\"Response content-type is application/json\"] = true;\r",
									"else\r",
									"tests[\"Response content-type is application/json\"] = false;\r",
									"\r",
									"if(responseBody.has(\"ResponseSignatureEncryptedValue\") && responseBody.has(\"GWSymmetricKeyEncryptedValue\") && responseBody.has(\"Scope\") && responseBody.has(\"TransactionId\") && responseBody.has(\"Status\"))\r",
									"tests[\"Response body contains all necessary fileds\"] = true;\r",
									"else\r",
									"tests[\"Response body contains all necessary fileds\"] = false;\r",
									"\r",
									"if(postman.getResponseHeader(\"x-oracle-dms-ecid\") || postman.getResponseHeader(\"x-oracle-dms-rid\"))\r",
									"tests[\"response headers contains unnecessary headers\"]= false;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "apikey",
								"value": "{{apikey}}",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{hostname}}",
								"type": "text"
							},
							{
								"key": "HTTP-Referer",
								"value": "{{hostname}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"RequestSignatureEncryptedValue\": \"{{RSEV}}\",\r\n    \"SymmetricKeyEncryptedValue\": \"{{SEV}}\",\r\n    \"Scope\": \"{{Scope}}\",\r\n    \"TransactionId\": \"{{$timestamp}}\",\r\n    \"OAuthTokenValue\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{hostname}}/API/create-TWL-loanApplication",
							"protocol": "https",
							"host": [
								"{{hostname}}"
							],
							"path": [
								"API",
								"create-TWL-loanApplication"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
